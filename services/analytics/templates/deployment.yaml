apiVersion: apps/v1
kind: Deployment
metadata:
    name: {{ include "analytics.fullname" . }}
    labels:
        {{- include "analytics.labels" . | nindent 4 }}
spec:
    replicas: {{ .Values.replicaCount }}
    selector:
        matchLabels:
        {{- include "analytics.selectorLabels" . | nindent 6 }}
    template:
        metadata:
            labels:
                {{- include "analytics.selectorLabels" . | nindent 8 }}
            annotations:
                    {{- with .Values.podAnnotations }}
                    {{- toYaml . | nindent 8 }}
                    {{- end }}
                analytics/properties-hash: {{ include "analytics.propertiesHash" . }}
        spec:
                {{- with .Values.imagePullSecrets }}
            imagePullSecrets:
                {{- toYaml . | nindent 8 }}
                {{- end }}
            serviceAccountName: {{ include "analytics.serviceAccountName" . }}
            securityContext:
                {{- toYaml .Values.podSecurityContext | nindent 8 }}
            containers:
                - name: {{ .Chart.Name }}
                  securityContext:
                        {{- toYaml .Values.securityContext | nindent 12 }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  ports:
                      - name: api
                        containerPort: {{ .Values.service.ports.api }}
                        protocol: TCP
                      - name: management
                        containerPort: {{ .Values.service.ports.management }}
                        protocol: TCP
                  livenessProbe:
                      httpGet:
                          path: /actuator/health
                          port: management
                      initialDelaySeconds: 120
                      timeoutSeconds: 3
                      periodSeconds: 30
                      successThreshold: 1
                      failureThreshold: 5
                  readinessProbe:
                      httpGet:
                          path: /actuator/health
                          port: management
                      initialDelaySeconds: 120
                      timeoutSeconds: 3
                      periodSeconds: 30
                      successThreshold: 1
                      failureThreshold: 5
                  volumeMounts:
                      - name: config-volume
                        mountPath: /opt/analytics/entrypoint.sh
                        subPath: entrypoint.sh
                        readOnly: true
                      - name: config-volume
                        mountPath: /opt/analytics/logback.xml
                        subPath: logback.xml
                        readOnly: true
                      - name: config-volume
                        mountPath: /opt/analytics/loggers.xml
                        subPath: loggers.xml
                        readOnly: true
                  command: ["/opt/analytics/entrypoint.sh"]
                  args:
                      - -jar
                      - /opt/analytics/analytics.jar
                      - --logging.config=/opt/analytics/logback.xml
                      - --spring.application.name=analytics
                      - --kafka.bootstrap.servers={{ .Values.kafka.bootstrapServers }}
                      - --kafka.topic.event.sink.initial={{ .Values.kafka.topicInvoiceName }}
                      - --kafka.topic.payout.initial={{ .Values.kafka.topicPayoutName }}
                      - --kafka.topic.party.initial={{ .Values.kafka.topicPartyName }}
                      - --kafka.consumer.concurrency={{ .Values.kafka.topicConcurrency }}
                      - --kafka.consumer.prefix={{ .Values.kafka.topicPrefix }}
                      - --kafka.max.poll.records=200
                      - --kafka.max.poll.interval.ms=300000
                      - --kafka.max.session.timeout.ms=300000
                          {{/*                      - --if kafka.ssl.get('enable', False) %}*/}}
                          {{/*                      - --kafka.ssl.enabled={{ kafka.ssl.enable }}*/}}
                          {{/*                      - --kafka.ssl.key-store-location=/opt/{{ service_name }}/kafka-keystore.p12*/}}
                          {{/*                      - --kafka.ssl.key-store-password="{{ service.keystore.pass }}"*/}}
                          {{/*                      - --kafka.ssl.key-password="{{ service.keystore.pass }}"*/}}
                          {{/*                      - --kafka.ssl.trust-store-location=/opt/{{ service_name }}/kafka-truststore.p12*/}}
                          {{/*                      - --kafka.ssl.trust-store-password="{{ kafka.truststore.java.pass }}"*/}}
                          {{/*                      - --endif %}*/}}
                      - --spring.datasource.hikari.maximum-pool-size={{ .Values.datasource.poolsize }}
                      - --spring.datasource.hikari.data-source-properties.prepareThreshold=0
                      - --spring.datasource.hikari.leak-detection-threshold=5300
                      - --spring.datasource.hikari.max-lifetime=300000
                      - --spring.datasource.hikari.idle-timeout=30000
                      - --spring.datasource.hikari.minimum-idle=2
                      - --spring.flyway.schemas=analytics
                      - --postgres.db.schema=analytics
                      - --flyway.schemas=analytics
                      - --columbus.url={{ .Values.columbus.url }}
                      - --columbus.networkTimeout={{ .Values.columbus.networkTimeout }}
                      - --service.invoicing.url={{ .Values.hellgate.url }}
                      - --service.invoicing.networkTimeout={{ .Values.hellgate.networkTimeout }}
                      - --service.payouter.url={{ .Values.payouter.url }}
                      - --service.payouter.networkTimeout={{ .Values.payouter.networkTimeout }}
                      - --service.dominant.url={{ .Values.dominant.url }}
                      - --service.dominant.networkTimeout={{ .Values.dominant.networkTimeout }}
                      - --service.dominant.scheduler.enabled=true
                      - --service.dominant.scheduler.pollingDelay=10000
                      - --service.dominant.scheduler.querySize=10
                      - --logging.level.com.rbkmoney.analytics.service.PartyService=DEBUG
                      - --logging.level.com.rbkmoney.analytics.listener.handler.party.PartyMachineEventHandler=DEBUG
                      - --logging.level.com.rbkmoney.analytics.listener.mapper.party.ContractorCreatedHandler=DEBUG
                  env:
                      - name: LOGBACK_SERVICE_NAME
                        value: "analytics"
                  resources:
                {{- toYaml .Values.resources | nindent 12 }}
            volumes:
                - name: config-volume
                  configMap:
                      name: {{ include "analytics.fullname" . }}
                      items:
                          - key: entrypoint.sh
                            path: entrypoint.sh
                            mode: 0755
                          - key: logback.xml
                            path: logback.xml
                          - key: loggers.xml
                            path: loggers.xml
                {{- with .Values.nodeSelector }}
            nodeSelector:
                {{- toYaml . | nindent 8 }}
                {{- end }}
                {{- with .Values.affinity }}
            affinity:
                {{- toYaml . | nindent 8 }}
                {{- end }}
                {{- with .Values.tolerations }}
            tolerations:
                {{- toYaml . | nindent 8 }}
        {{- end }}
