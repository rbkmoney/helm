%% -*- mode: erlang -*-
[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => standard_io,
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => file,
                    file => "/var/log/capi/access_log.json",
                    sync_mode_qlen => 2000,
                    drop_mode_qlen => 2000,
                    flush_qlen => 3000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {capi, [
        {ip                  , "::"                     },
        {port                , 8080                     },
        {service_type        , real                     },
        {authorizers, #{
            jwt => #{
                signee => capi,
                keyset => #{
                    keycloak => {pem_file, "/var/lib/capi/keys/keycloak/keycloak.pubkey.pem"},
                    capi     => {pem_file, "/var/lib/capi/keys/capi.privkey.pem"}
                }
            }
        }},
        {oops_bodies, #{
            500 => "/var/lib/capi/oops-bodies/oops-body1",
            501 => "/var/lib/capi/oops-bodies/oops-body1",
            502 => "/var/lib/capi/oops-bodies/oops-body1",
            503 => "/var/lib/capi/oops-bodies/oops-body2",
            504 => "/var/lib/capi/oops-bodies/oops-body2"
        }},
        {swagger_handler_opts, #{
             validation_opts => #{
                 schema => #{
                     response => mild
                 }
             }
        }},
        {health_check, #{
            disk    => {erl_health, disk     , ["/", 99]},
            memory  => {erl_health, cg_memory, [70]},
            service => {erl_health, service  , [<<"capi-v1">>]}
        }},
        {reporter_url_lifetime, 300}, % seconds
        {lechiffre_opts, #{
            encryption_key_path => <<"/var/lib/capi/keys/token_encryption_key1.jwk">>,
            decryption_key_paths => [
                <<"/var/lib/capi/keys/token_encryption_key1.jwk">>
            ]
        }}
    ]},

    {capi_woody_client, [
        {service_urls, #{
            bender                  => "http://bender:8022/v1/bender",
            invoicing               => "http://hellgate:8022/v1/processing/invoicing",
            invoice_templating      => "http://hellgate:8022/v1/processing/invoice_templating",
            merchant_stat           => "http://magista:8022/stat",
            party_management        => "http://hellgate:8022/v1/processing/partymgmt",
            geo_ip_service          => "http://columbus:8022/repo",
            accounter               => "http://shumway:8022/accounter",
            file_storage            => "http://file_storage:8022/file_storage",
            reporting               => "http://reporter:8022/reports/new-proto",
            webhook_manager         => "http://hooker:8022/hook",
            customer_management     => "http://hellgate:8022/v1/processing/customer_management"
        }},
        {service_deadlines, #{
            bender              => 30000,
            invoicing           => 30000, % milliseconds
            party_management    => 30000,
            customer_management => 30000
        }}
    ]},

    {dmt_client, [
        {cache_update_interval, 30000}, % milliseconds
        {cache_server_call_timeout, 30000}, % milliseconds
        {max_cache_size, #{
            elements => 5,
            memory => 52428800 % 50Mb
        }},
        {service_urls, #{
            'Repository'       => <<"http://dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"http://dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    {how_are_you, [
        {metrics_publishers, [
            %{hay_statsd_publisher, #{
            %    key_prefix => <<"{{ service_name }}.">>,
            %    host => "{{ salt['pillar.get']('wetkitty:statsd:host') }}",
            %    port => {{ salt['pillar.get']('wetkitty:statsd:port') }}
            %}}
        ]}
    ]},

    {os_mon, [
        {disksup_posix_only, true}
    ]},

    {snowflake, [{machine_id, hostname_hash}]}
].
