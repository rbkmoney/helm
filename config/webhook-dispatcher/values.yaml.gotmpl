# -*- mode: yaml -*-

replicaCount: 1

image:
  repository: docker.io/rbkmoney/webhook-dispatcher
  tag: 2d816921391da217e8fde45e8492319c4d791383
  pullPolicy: IfNotPresent

runopts:
  command: ["/opt/webhook-dispatcher/entrypoint.sh"]

configMap:
  data:
    entrypoint.sh: |
      {{- readFile "entrypoint.sh" | nindent 6 }}
    loggers.xml: |
      {{- readFile "loggers.xml" | nindent 6 }}
    logback.xml: |
      {{- readFile "../logs/logback.xml" | nindent 6 }}

volumes:
  - name: config-volume
    configMap:
      name: {{ .Release.Name }}
      defaultMode: 0755

volumeMounts:
  - name: config-volume
    mountPath: /opt/webhook-dispatcher/entrypoint.sh
    subPath: entrypoint.sh
    readOnly: true
  - name: config-volume
    mountPath: /opt/webhook-dispatcher/logback.xml
    subPath: logback.xml
    readOnly: true
  - name: config-volume
    mountPath: /opt/webhook-dispatcher/loggers.xml
    subPath: loggers.xml
    readOnly: true

service:
  ports:
    - name: api
      port: 8022
    - name: management
      port: 8023

livenessProbe:
  httpGet:
    path: /actuator/health
    port: management

readinessProbe:
  httpGet:
    path: /actuator/health
    port: management

podAnnotations:
  vault.hashicorp.com/role: "db-app"
  vault.hashicorp.com/agent-inject: "true"
  vault.hashicorp.com/agent-inject-secret-application.properties: "database/creds/db-app-webhook-dispatcher"
  vault.hashicorp.com/agent-inject-template-application.properties: |
    {{`{{- with secret "database/creds/db-app-webhook-dispatcher" -}}
    spring.datasource.url=jdbc:postgresql://postgres-postgresql:5432/webhook-dispatcher?sslmode=disable
    spring.datasource.username={{ .Data.username }}
    spring.datasource.password={{ .Data.password }}
    spring.flyway.url=jdbc:postgresql://postgres-postgresql:5432/webhook-dispatcher?sslmode=disable
    spring.flyway.user={{ .Data.username }}
    spring.flyway.password={{ .Data.password }}
    {{- end }}`}}

metrics:
  serviceMonitor:
    enabled: true
    namespace: {{ .Release.Namespace }}
    additionalLabels:
      release: prometheus
    endpoints:
      - port: "management"
        path: /actuator/prometheus
        scheme: http

ciliumPolicies:
  - filters:
    - port: 5432
      type: TCP
    name: postgres
    namespace: {{ .Release.Namespace }}
  - filters:
    - port: 9092
      rules:
        kafka:
        - role: consume
          topics:
            - webhooks
            - webhook-first-retry
            - webhook-second-retry
            - webhook-third-retry
            - webhook-last-retry
            - webhook-dead-letter-queue
      type: TCP
    name: kafka
    namespace: {{ .Release.Namespace }}
  - filters:
    - port: 8200
      type: TCP
    name: vault
    namespace: {{ .Release.Namespace }}

##In case of kafka mTLS auth move it to vault template
# {{- /*
#      kafka.ssl.enabled={{ kafka.ssl.enable }}
#      kafka.ssl.key-store-location=/opt/{{ service_name }}/kafka-keystore.p12
#      kafka.ssl.key-store-password="{{ service.keystore.pass }}"
#      kafka.ssl.key-password="{{ service.keystore.pass }}"
#      kafka.ssl.trust-store-location=/opt/{{ service_name }}/kafka-truststore.p12
#      kafka.ssl.trust-store-password="{{ kafka.truststore.java.pass }}"
# */ -}}
